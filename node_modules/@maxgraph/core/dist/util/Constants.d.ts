/**
 * Defines the portion of the cell which is to be used as a connectable
 * region. Default is 0.3. Possible values are 0 < x <= 1.
 */
export declare const DEFAULT_HOTSPOT = 0.3;
/**
 * Defines the minimum size in pixels of the portion of the cell which is
 * to be used as a connectable region. Default is 8.
 */
export declare const MIN_HOTSPOT_SIZE = 8;
/**
 * Defines the maximum size in pixels of the portion of the cell which is
 * to be used as a connectable region. Use 0 for no maximum. Default is 0.
 */
export declare const MAX_HOTSPOT_SIZE = 0;
export declare enum RENDERING_HINT {
    EXACT = "exact",
    FASTER = "faster",
    FASTEST = "fastest"
}
export declare enum DIALECT {
    /** the SVG display dialect name. */
    SVG = "svg",
    /** the mixed HTML display dialect name. */
    MIXEDHTML = "mixedHtml",
    /** the preferred HTML display dialect name. */
    PREFERHTML = "preferHtml",
    /** the strict HTML display dialect name. */
    STRICTHTML = "strictHtml"
}
/**
 * Name of the field to be used to store the object ID. Default is
 * <code>mxObjectId</code>.
 */
export declare const IDENTITY_FIELD_NAME = "mxObjectId";
/**
 * Defines the SVG namespace.
 */
export declare const NS_SVG = "http://www.w3.org/2000/svg";
/**
 * Defines the XLink namespace.
 */
export declare const NS_XLINK = "http://www.w3.org/1999/xlink";
/**
 * Defines the color to be used to draw shadows in shapes and windows.
 * Default is gray.
 */
export declare const SHADOWCOLOR = "gray";
/**
 * Specifies the x-offset of the shadow. Default is 2.
 */
export declare const SHADOW_OFFSET_X = 2;
/**
 * Specifies the y-offset of the shadow. Default is 3.
 */
export declare const SHADOW_OFFSET_Y = 3;
/**
 * Defines the opacity for shadows. Default is 1.
 */
export declare const SHADOW_OPACITY = 1;
export declare enum NODETYPE {
    ELEMENT = 1,
    ATTRIBUTE = 2,
    TEXT = 3,
    CDATA = 4,
    ENTITY_REFERENCE = 5,
    ENTITY = 6,
    PROCESSING_INSTRUCTION = 7,
    COMMENT = 8,
    DOCUMENT = 9,
    DOCUMENTTYPE = 10,
    DOCUMENT_FRAGMENT = 11,
    NOTATION = 12
}
/**
 * Defines the vertical offset for the tooltip.
 * Default is 16.
 */
export declare const TOOLTIP_VERTICAL_OFFSET = 16;
/**
 * Specifies the default valid color. Default is #0000FF.
 */
export declare const DEFAULT_VALID_COLOR = "#00FF00";
/**
 * Specifies the default invalid color. Default is #FF0000.
 */
export declare const DEFAULT_INVALID_COLOR = "#FF0000";
/**
 * Specifies the default highlight color for shape outlines.
 * Default is #0000FF. This is used in {@link EdgeHandler}.
 */
export declare const OUTLINE_HIGHLIGHT_COLOR = "#00FF00";
/**
 * Defines the strokewidth to be used for shape outlines.
 * Default is 5. This is used in {@link EdgeHandler}.
 */
export declare const OUTLINE_HIGHLIGHT_STROKEWIDTH = 5;
/**
 * Defines the strokewidth to be used for the highlights.
 * Default is 3.
 */
export declare const HIGHLIGHT_STROKEWIDTH = 3;
/**
 * Size of the constraint highlight (in px). Default is 2.
 */
export declare const HIGHLIGHT_SIZE = 2;
/**
 * Opacity (in %) used for the highlights (including outline).
 * Default is 100.
 */
export declare const HIGHLIGHT_OPACITY = 100;
export declare enum CURSOR {
    /** Defines the cursor for a movable vertex. */
    MOVABLE_VERTEX = "move",
    /** Defines the cursor for a movable edge. */
    MOVABLE_EDGE = "move",
    /** Defines the cursor for a movable label. */
    LABEL_HANDLE = "default",
    /** Defines the cursor for a terminal handle. */
    TERMINAL_HANDLE = "pointer",
    /** Defines the cursor for a movable bend. */
    BEND_HANDLE = "crosshair",
    /** Defines the cursor for a movable bend. */
    VIRTUAL_BEND_HANDLE = "crosshair",
    /** Defines the cursor for a connectable state. */
    CONNECT = "pointer"
}
/**
 * Defines the color to be used for the cell highlighting.
 * Use 'none' for no color. Default is #00FF00.
 */
export declare const HIGHLIGHT_COLOR = "#00FF00";
/**
 * Defines the color to be used for highlighting a target cell for a new
 * or changed connection. Note that this may be either a source or
 * target terminal in the graph. Use 'none' for no color.
 * Default is #0000FF.
 */
export declare const CONNECT_TARGET_COLOR = "#0000FF";
/**
 * Defines the color to be used for highlighting a invalid target cells
 * for a new or changed connections. Note that this may be either a source
 * or target terminal in the graph. Use 'none' for no color. Default is
 * #FF0000.
 */
export declare const INVALID_CONNECT_TARGET_COLOR = "#FF0000";
/**
 * Defines the color to be used for the highlighting target parent cells
 * (for drag and drop). Use 'none' for no color. Default is #0000FF.
 */
export declare const DROP_TARGET_COLOR = "#0000FF";
/**
 * Defines the color to be used for the coloring valid connection
 * previews. Use 'none' for no color. Default is #FF0000.
 */
export declare const VALID_COLOR = "#00FF00";
/**
 * Defines the color to be used for the coloring invalid connection
 * previews. Use 'none' for no color. Default is #FF0000.
 */
export declare const INVALID_COLOR = "#FF0000";
/**
 * Defines the color to be used for the selection border of edges. Use
 * 'none' for no color. Default is #00FF00.
 */
export declare const EDGE_SELECTION_COLOR = "#00FF00";
/**
 * Defines the color to be used for the selection border of vertices. Use
 * 'none' for no color. Default is #00FF00.
 */
export declare const VERTEX_SELECTION_COLOR = "#00FF00";
/**
 * Defines the strokewidth to be used for vertex selections.
 * Default is 1.
 */
export declare const VERTEX_SELECTION_STROKEWIDTH = 1;
/**
 * Defines the strokewidth to be used for edge selections.
 * Default is 1.
 */
export declare const EDGE_SELECTION_STROKEWIDTH = 1;
/**
 * Defines the dashed state to be used for the vertex selection
 * border. Default is true.
 */
export declare const VERTEX_SELECTION_DASHED = true;
/**
 * Defines the dashed state to be used for the edge selection
 * border. Default is true.
 */
export declare const EDGE_SELECTION_DASHED = true;
/**
 * Defines the color to be used for the guidelines in `Guide`.
 * @default #FF0000.
 */
export declare const GUIDE_COLOR = "#FF0000";
/**
 * Defines the strokewidth to be used for the guidelines in `Guide`.
 * @default 1.
 */
export declare const GUIDE_STROKEWIDTH = 1;
/**
 * Defines the color to be used for the outline rectangle
 * border.  Use 'none' for no color. Default is #0099FF.
 */
export declare const OUTLINE_COLOR = "#0099FF";
/**
 * Defines the strokewidth to be used for the outline rectangle
 * stroke width. Default is 3.
 */
export declare const OUTLINE_STROKEWIDTH = 3;
/**
 * Defines the default size for handles. Default is 6.
 */
export declare const HANDLE_SIZE = 6;
/**
 * Defines the default size for label handles. Default is 4.
 */
export declare const LABEL_HANDLE_SIZE = 4;
/**
 * Defines the color to be used for the handle fill color. Use 'none' for
 * no color. Default is #00FF00 (green).
 */
export declare const HANDLE_FILLCOLOR = "#00FF00";
/**
 * Defines the color to be used for the handle stroke color. Use 'none' for
 * no color. Default is black.
 */
export declare const HANDLE_STROKECOLOR = "black";
/**
 * Defines the color to be used for the label handle fill color. Use 'none'
 * for no color. Default is yellow.
 */
export declare const LABEL_HANDLE_FILLCOLOR = "yellow";
/**
 * Defines the color to be used for the connect handle fill color. Use
 * 'none' for no color. Default is #0000FF (blue).
 */
export declare const CONNECT_HANDLE_FILLCOLOR = "#0000FF";
/**
 * Defines the color to be used for the locked handle fill color. Use
 * 'none' for no color. Default is #FF0000 (red).
 */
export declare const LOCKED_HANDLE_FILLCOLOR = "#FF0000";
/**
 * Defines the color to be used for the outline sizer fill color. Use
 * 'none' for no color. Default is #00FFFF.
 */
export declare const OUTLINE_HANDLE_FILLCOLOR = "#00FFFF";
/**
 * Defines the color to be used for the outline sizer stroke color. Use
 * 'none' for no color. Default is #0033FF.
 */
export declare const OUTLINE_HANDLE_STROKECOLOR = "#0033FF";
/**
 * Defines the default family for all fonts. Default is Arial,Helvetica.
 */
export declare const DEFAULT_FONTFAMILY = "Arial,Helvetica";
/**
 * Defines the default size (in px). Default is 11.
 */
export declare const DEFAULT_FONTSIZE = 11;
/**
 * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is
 * defined for it in the style. Default value is an empty string which means
 * the default system setting is used and no direction is set.
 */
export declare const DEFAULT_TEXT_DIRECTION = "";
/**
 * Defines the default line height for text labels. Default is 1.2.
 */
export declare const LINE_HEIGHT = 1.2;
/**
 * Defines the CSS value for the word-wrap property. Default is "normal".
 * Change this to "break-word" to allow long words to be able to be broken
 * and wrap onto the next line.
 */
export declare const WORD_WRAP = "normal";
/**
 * Specifies if absolute line heights should be used (px) in CSS. Default
 * is false. Set this to true for backwards compatibility.
 */
export declare const ABSOLUTE_LINE_HEIGHT = false;
/**
 * Defines the default style for all fonts. Default is 0. This can be set
 * to any combination of font styles as follows.
 *
 * ```javascript
 * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;
 * ```
 */
export declare const DEFAULT_FONTSTYLE = 0;
/**
 * Defines the default start size for swimlanes. Default is 40.
 */
export declare const DEFAULT_STARTSIZE = 40;
/**
 * Defines the default size for all markers. Default is 6.
 */
export declare const DEFAULT_MARKERSIZE = 6;
/**
 * Defines the default width and height for images used in the
 * label shape. Default is 24.
 */
export declare const DEFAULT_IMAGESIZE = 24;
/**
 * Defines the length of the horizontal segment of an `Entity Relation`.
 * This can be overridden using {@link CellStateStyle.segment} style.
 */
export declare const ENTITY_SEGMENT = 30;
/**
 * Defines the default rounding factor for the rounded vertices in percent between
 * `0` and `1`. Values should be smaller than `0.5`.
 * See {@link CellStateStyle.arcSize}.
 */
export declare const RECTANGLE_ROUNDING_FACTOR = 0.15;
/**
 * Defines the default size in pixels of the arcs for the rounded edges.
 * See {@link CellStateStyle.arcSize}.
 */
export declare const LINE_ARCSIZE = 20;
/**
 * Defines the spacing between the arrow shape and its terminals. Default is 0.
 */
export declare const ARROW_SPACING = 0;
/**
 * Defines the width of the arrow shape. Default is 30.
 */
export declare const ARROW_WIDTH = 30;
/**
 * Defines the size of the arrowhead in the arrow shape. Default is 30.
 */
export declare const ARROW_SIZE = 30;
/**
 * Defines the rectangle for the A4 portrait page format. The dimensions
 * of this page format are 826x1169 pixels.
 */
export declare const PAGE_FORMAT_A4_PORTRAIT: number[];
/**
 * Defines the rectangle for the A4 portrait page format. The dimensions
 * of this page format are 826x1169 pixels.
 */
export declare const PAGE_FORMAT_A4_LANDSCAPE: number[];
/**
 * Defines the rectangle for the Letter portrait page format. The
 * dimensions of this page format are 850x1100 pixels.
 */
export declare const PAGE_FORMAT_LETTER_PORTRAIT: number[];
/**
 * Defines the rectangle for the Letter portrait page format. The dimensions
 * of this page format are 850x1100 pixels.
 */
export declare const PAGE_FORMAT_LETTER_LANDSCAPE: number[];
/**
 * Defines the value for none. Default is "none".
 */
export declare const NONE = "none";
export declare enum FONT {
    /** for bold fonts. */
    BOLD = 1,
    /** for italic fonts. */
    ITALIC = 2,
    /** for underlined fonts. */
    UNDERLINE = 4,
    /** for strikethrough fonts. */
    STRIKETHROUGH = 8
}
export declare enum ARROW {
    /** for classic arrow markers. */
    CLASSIC = "classic",
    /** for thin classic arrow markers. */
    CLASSIC_THIN = "classicThin",
    /** for block arrow markers. */
    BLOCK = "block",
    /** for thin block arrow markers. */
    BLOCK_THIN = "blockThin",
    /** for open arrow markers. */
    OPEN = "open",
    /** for thin open arrow markers. */
    OPEN_THIN = "openThin",
    /** for oval arrow markers. */
    OVAL = "oval",
    /** for diamond arrow markers. */
    DIAMOND = "diamond",
    /** for thin diamond arrow markers. */
    DIAMOND_THIN = "diamondThin"
}
export declare enum ALIGN {
    /** left horizontal alignment. */
    LEFT = "left",
    /** center horizontal alignment. */
    CENTER = "center",
    /** right horizontal alignment. */
    RIGHT = "right",
    /** top vertical alignment. */
    TOP = "top",
    /** middle vertical alignment. */
    MIDDLE = "middle",
    /** bottom vertical alignment. */
    BOTTOM = "bottom"
}
export declare enum DIRECTION {
    NORTH = "north",
    SOUTH = "south",
    EAST = "east",
    WEST = "west"
}
export declare enum TEXT_DIRECTION {
    /**
     * Use this value to use the default text direction of the operating system. */
    DEFAULT = "",
    /** Use this value to find the direction for a given text with {@link Text#getAutoDirection}. */
    AUTO = "auto",
    /** Use this value for left to right text direction. */
    LTR = "ltr",
    /** Use this value for right to left text direction. */
    RTL = "rtl"
}
/**
 * - DIRECTION_MASK_NONE: Constant for no direction.
 *
 * - DIRECTION_MASK_WEST: Bitwise mask for west direction.
 *
 * - DIRECTION_MASK_NORTH: Bitwise mask for north direction.
 *
 * - DIRECTION_MASK_SOUTH: Bitwise mask for south direction.
 *
 * - DIRECTION_MASK_EAST: Bitwise mask for east direction.
 *
 * - DIRECTION_MASK_ALL: Bitwise mask for all directions.
 */
export declare const DIRECTION_MASK: {
    NONE: number;
    WEST: number;
    NORTH: number;
    SOUTH: number;
    EAST: number;
    ALL: number;
};
/**
 * Default is horizontal.
 */
export declare enum ELBOW {
    VERTICAL = "vertical",
    HORIZONTAL = "horizontal"
}
/**
 * Can be used as a string value for the STYLE_EDGE style.
 */
export declare enum EDGESTYLE {
    ELBOW = "elbowEdgeStyle",
    ENTITY_RELATION = "entityRelationEdgeStyle",
    LOOP = "loopEdgeStyle",
    SIDETOSIDE = "sideToSideEdgeStyle",
    TOPTOBOTTOM = "topToBottomEdgeStyle",
    ORTHOGONAL = "orthogonalEdgeStyle",
    SEGMENT = "segmentEdgeStyle",
    MANHATTAN = "manhattanEdgeStyle"
}
/**
 * Can be used as a string value for the STYLE_PERIMETER style.
 */
export declare enum PERIMETER {
    ELLIPSE = "ellipsePerimeter",
    RECTANGLE = "rectanglePerimeter",
    RHOMBUS = "rhombusPerimeter",
    HEXAGON = "hexagonPerimeter",
    TRIANGLE = "trianglePerimeter"
}
export declare enum SHAPE {
    /**
     * Name under which {@link RectangleShape} is registered in {@link CellRenderer}.
     * Default is rectangle.
     */
    RECTANGLE = "rectangle",
    /**
     * Name under which {@link Ellipse} is registered in {@link CellRenderer}.
     * Default is ellipse.
     */
    ELLIPSE = "ellipse",
    /**
     * Name under which {@link DoubleEllipse} is registered in {@link CellRenderer}.
     * Default is doubleEllipse.
     */
    DOUBLE_ELLIPSE = "doubleEllipse",
    /**
     * Name under which {@link Rhombus} is registered in {@link CellRenderer}.
     * Default is rhombus.
     */
    RHOMBUS = "rhombus",
    /**
     * Name under which {@link LineShape} is registered in {@link CellRenderer} by default.
     */
    LINE = "line",
    /**
     * Name under which {@link ImageShape} is registered in {@link CellRenderer}.
     * Default is image.
     */
    IMAGE = "image",
    /**
     * Name under which {@link ArrowShape} is registered in {@link CellRenderer} by default.
     */
    ARROW = "arrow",
    /**
     * Name under which {@link ArrowConnectorShape} is registered in {@link CellRenderer} by default.
     */
    ARROW_CONNECTOR = "arrowConnector",
    /**
     * Name under which {@link Label} is registered in {@link CellRenderer}.
     * Default is label.
     */
    LABEL = "label",
    /**
     * Name under which {@link Cylinder} is registered in {@link CellRenderer}.
     * Default is cylinder.
     */
    CYLINDER = "cylinder",
    /**
     * Name under which {@link Swimlane} is registered in {@link CellRenderer}.
     * Default is swimlane.
     */
    SWIMLANE = "swimlane",
    /**
     * Name under which {@link ConnectorShape} is registered in {@link CellRenderer} by default.
     */
    CONNECTOR = "connector",
    /**
     * Name under which {@link Actor} is registered in {@link CellRenderer}.
     * Default is actor.
     */
    ACTOR = "actor",
    /**
     * Name under which {@link Cloud} is registered in {@link CellRenderer}.
     * Default is cloud.
     */
    CLOUD = "cloud",
    /**
     * Name under which {@link Triangle} is registered in {@link CellRenderer}.
     * Default is triangle.
     */
    TRIANGLE = "triangle",
    /**
     * Name under which {@link Hexagon} is registered in {@link CellRenderer}.
     * Default is hexagon.
     */
    HEXAGON = "hexagon"
}
