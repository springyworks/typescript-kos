/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
/**
 * Defines the portion of the cell which is to be used as a connectable
 * region. Default is 0.3. Possible values are 0 < x <= 1.
 */
export const DEFAULT_HOTSPOT = 0.3;
/**
 * Defines the minimum size in pixels of the portion of the cell which is
 * to be used as a connectable region. Default is 8.
 */
export const MIN_HOTSPOT_SIZE = 8;
/**
 * Defines the maximum size in pixels of the portion of the cell which is
 * to be used as a connectable region. Use 0 for no maximum. Default is 0.
 */
export const MAX_HOTSPOT_SIZE = 0;
export var RENDERING_HINT;
(function (RENDERING_HINT) {
    RENDERING_HINT["EXACT"] = "exact";
    RENDERING_HINT["FASTER"] = "faster";
    RENDERING_HINT["FASTEST"] = "fastest";
})(RENDERING_HINT || (RENDERING_HINT = {}));
export var DIALECT;
(function (DIALECT) {
    /** the SVG display dialect name. */
    DIALECT["SVG"] = "svg";
    /** the mixed HTML display dialect name. */
    DIALECT["MIXEDHTML"] = "mixedHtml";
    /** the preferred HTML display dialect name. */
    DIALECT["PREFERHTML"] = "preferHtml";
    /** the strict HTML display dialect name. */
    DIALECT["STRICTHTML"] = "strictHtml";
})(DIALECT || (DIALECT = {}));
/**
 * Name of the field to be used to store the object ID. Default is
 * <code>mxObjectId</code>.
 */
export const IDENTITY_FIELD_NAME = 'mxObjectId';
/**
 * Defines the SVG namespace.
 */
export const NS_SVG = 'http://www.w3.org/2000/svg';
/**
 * Defines the XLink namespace.
 */
export const NS_XLINK = 'http://www.w3.org/1999/xlink';
/**
 * Defines the color to be used to draw shadows in shapes and windows.
 * Default is gray.
 */
export const SHADOWCOLOR = 'gray';
/**
 * Specifies the x-offset of the shadow. Default is 2.
 */
export const SHADOW_OFFSET_X = 2;
/**
 * Specifies the y-offset of the shadow. Default is 3.
 */
export const SHADOW_OFFSET_Y = 3;
/**
 * Defines the opacity for shadows. Default is 1.
 */
export const SHADOW_OPACITY = 1;
export var NODETYPE;
(function (NODETYPE) {
    NODETYPE[NODETYPE["ELEMENT"] = 1] = "ELEMENT";
    NODETYPE[NODETYPE["ATTRIBUTE"] = 2] = "ATTRIBUTE";
    NODETYPE[NODETYPE["TEXT"] = 3] = "TEXT";
    NODETYPE[NODETYPE["CDATA"] = 4] = "CDATA";
    NODETYPE[NODETYPE["ENTITY_REFERENCE"] = 5] = "ENTITY_REFERENCE";
    NODETYPE[NODETYPE["ENTITY"] = 6] = "ENTITY";
    NODETYPE[NODETYPE["PROCESSING_INSTRUCTION"] = 7] = "PROCESSING_INSTRUCTION";
    NODETYPE[NODETYPE["COMMENT"] = 8] = "COMMENT";
    NODETYPE[NODETYPE["DOCUMENT"] = 9] = "DOCUMENT";
    NODETYPE[NODETYPE["DOCUMENTTYPE"] = 10] = "DOCUMENTTYPE";
    NODETYPE[NODETYPE["DOCUMENT_FRAGMENT"] = 11] = "DOCUMENT_FRAGMENT";
    NODETYPE[NODETYPE["NOTATION"] = 12] = "NOTATION";
})(NODETYPE || (NODETYPE = {}));
/**
 * Defines the vertical offset for the tooltip.
 * Default is 16.
 */
export const TOOLTIP_VERTICAL_OFFSET = 16;
/**
 * Specifies the default valid color. Default is #0000FF.
 */
export const DEFAULT_VALID_COLOR = '#00FF00';
/**
 * Specifies the default invalid color. Default is #FF0000.
 */
export const DEFAULT_INVALID_COLOR = '#FF0000';
/**
 * Specifies the default highlight color for shape outlines.
 * Default is #0000FF. This is used in {@link EdgeHandler}.
 */
export const OUTLINE_HIGHLIGHT_COLOR = '#00FF00';
/**
 * Defines the strokewidth to be used for shape outlines.
 * Default is 5. This is used in {@link EdgeHandler}.
 */
export const OUTLINE_HIGHLIGHT_STROKEWIDTH = 5;
/**
 * Defines the strokewidth to be used for the highlights.
 * Default is 3.
 */
export const HIGHLIGHT_STROKEWIDTH = 3;
/**
 * Size of the constraint highlight (in px). Default is 2.
 */
export const HIGHLIGHT_SIZE = 2;
/**
 * Opacity (in %) used for the highlights (including outline).
 * Default is 100.
 */
export const HIGHLIGHT_OPACITY = 100;
export var CURSOR;
(function (CURSOR) {
    /** Defines the cursor for a movable vertex. */
    CURSOR["MOVABLE_VERTEX"] = "move";
    /** Defines the cursor for a movable edge. */
    CURSOR["MOVABLE_EDGE"] = "move";
    /** Defines the cursor for a movable label. */
    CURSOR["LABEL_HANDLE"] = "default";
    /** Defines the cursor for a terminal handle. */
    CURSOR["TERMINAL_HANDLE"] = "pointer";
    /** Defines the cursor for a movable bend. */
    CURSOR["BEND_HANDLE"] = "crosshair";
    /** Defines the cursor for a movable bend. */
    CURSOR["VIRTUAL_BEND_HANDLE"] = "crosshair";
    /** Defines the cursor for a connectable state. */
    CURSOR["CONNECT"] = "pointer";
})(CURSOR || (CURSOR = {}));
/**
 * Defines the color to be used for the cell highlighting.
 * Use 'none' for no color. Default is #00FF00.
 */
export const HIGHLIGHT_COLOR = '#00FF00';
/**
 * Defines the color to be used for highlighting a target cell for a new
 * or changed connection. Note that this may be either a source or
 * target terminal in the graph. Use 'none' for no color.
 * Default is #0000FF.
 */
export const CONNECT_TARGET_COLOR = '#0000FF';
/**
 * Defines the color to be used for highlighting a invalid target cells
 * for a new or changed connections. Note that this may be either a source
 * or target terminal in the graph. Use 'none' for no color. Default is
 * #FF0000.
 */
export const INVALID_CONNECT_TARGET_COLOR = '#FF0000';
/**
 * Defines the color to be used for the highlighting target parent cells
 * (for drag and drop). Use 'none' for no color. Default is #0000FF.
 */
export const DROP_TARGET_COLOR = '#0000FF';
/**
 * Defines the color to be used for the coloring valid connection
 * previews. Use 'none' for no color. Default is #FF0000.
 */
export const VALID_COLOR = '#00FF00';
/**
 * Defines the color to be used for the coloring invalid connection
 * previews. Use 'none' for no color. Default is #FF0000.
 */
export const INVALID_COLOR = '#FF0000';
/**
 * Defines the color to be used for the selection border of edges. Use
 * 'none' for no color. Default is #00FF00.
 */
export const EDGE_SELECTION_COLOR = '#00FF00';
/**
 * Defines the color to be used for the selection border of vertices. Use
 * 'none' for no color. Default is #00FF00.
 */
export const VERTEX_SELECTION_COLOR = '#00FF00';
/**
 * Defines the strokewidth to be used for vertex selections.
 * Default is 1.
 */
export const VERTEX_SELECTION_STROKEWIDTH = 1;
/**
 * Defines the strokewidth to be used for edge selections.
 * Default is 1.
 */
export const EDGE_SELECTION_STROKEWIDTH = 1;
/**
 * Defines the dashed state to be used for the vertex selection
 * border. Default is true.
 */
export const VERTEX_SELECTION_DASHED = true;
/**
 * Defines the dashed state to be used for the edge selection
 * border. Default is true.
 */
export const EDGE_SELECTION_DASHED = true;
/**
 * Defines the color to be used for the guidelines in `Guide`.
 * @default #FF0000.
 */
export const GUIDE_COLOR = '#FF0000';
/**
 * Defines the strokewidth to be used for the guidelines in `Guide`.
 * @default 1.
 */
export const GUIDE_STROKEWIDTH = 1;
/**
 * Defines the color to be used for the outline rectangle
 * border.  Use 'none' for no color. Default is #0099FF.
 */
export const OUTLINE_COLOR = '#0099FF';
/**
 * Defines the strokewidth to be used for the outline rectangle
 * stroke width. Default is 3.
 */
export const OUTLINE_STROKEWIDTH = 3;
/**
 * Defines the default size for handles. Default is 6.
 */
export const HANDLE_SIZE = 6;
/**
 * Defines the default size for label handles. Default is 4.
 */
export const LABEL_HANDLE_SIZE = 4;
/**
 * Defines the color to be used for the handle fill color. Use 'none' for
 * no color. Default is #00FF00 (green).
 */
export const HANDLE_FILLCOLOR = '#00FF00';
/**
 * Defines the color to be used for the handle stroke color. Use 'none' for
 * no color. Default is black.
 */
export const HANDLE_STROKECOLOR = 'black';
/**
 * Defines the color to be used for the label handle fill color. Use 'none'
 * for no color. Default is yellow.
 */
export const LABEL_HANDLE_FILLCOLOR = 'yellow';
/**
 * Defines the color to be used for the connect handle fill color. Use
 * 'none' for no color. Default is #0000FF (blue).
 */
export const CONNECT_HANDLE_FILLCOLOR = '#0000FF';
/**
 * Defines the color to be used for the locked handle fill color. Use
 * 'none' for no color. Default is #FF0000 (red).
 */
export const LOCKED_HANDLE_FILLCOLOR = '#FF0000';
/**
 * Defines the color to be used for the outline sizer fill color. Use
 * 'none' for no color. Default is #00FFFF.
 */
export const OUTLINE_HANDLE_FILLCOLOR = '#00FFFF';
/**
 * Defines the color to be used for the outline sizer stroke color. Use
 * 'none' for no color. Default is #0033FF.
 */
export const OUTLINE_HANDLE_STROKECOLOR = '#0033FF';
/**
 * Defines the default family for all fonts. Default is Arial,Helvetica.
 */
export const DEFAULT_FONTFAMILY = 'Arial,Helvetica';
/**
 * Defines the default size (in px). Default is 11.
 */
export const DEFAULT_FONTSIZE = 11;
/**
 * Defines the default value for the <STYLE_TEXT_DIRECTION> if no value is
 * defined for it in the style. Default value is an empty string which means
 * the default system setting is used and no direction is set.
 */
export const DEFAULT_TEXT_DIRECTION = '';
/**
 * Defines the default line height for text labels. Default is 1.2.
 */
export const LINE_HEIGHT = 1.2;
/**
 * Defines the CSS value for the word-wrap property. Default is "normal".
 * Change this to "break-word" to allow long words to be able to be broken
 * and wrap onto the next line.
 */
export const WORD_WRAP = 'normal';
/**
 * Specifies if absolute line heights should be used (px) in CSS. Default
 * is false. Set this to true for backwards compatibility.
 */
export const ABSOLUTE_LINE_HEIGHT = false;
/**
 * Defines the default style for all fonts. Default is 0. This can be set
 * to any combination of font styles as follows.
 *
 * ```javascript
 * mxConstants.DEFAULT_FONTSTYLE = mxConstants.FONT_BOLD | mxConstants.FONT_ITALIC;
 * ```
 */
export const DEFAULT_FONTSTYLE = 0;
/**
 * Defines the default start size for swimlanes. Default is 40.
 */
export const DEFAULT_STARTSIZE = 40;
/**
 * Defines the default size for all markers. Default is 6.
 */
export const DEFAULT_MARKERSIZE = 6;
/**
 * Defines the default width and height for images used in the
 * label shape. Default is 24.
 */
export const DEFAULT_IMAGESIZE = 24;
/**
 * Defines the length of the horizontal segment of an `Entity Relation`.
 * This can be overridden using {@link CellStateStyle.segment} style.
 */
export const ENTITY_SEGMENT = 30;
/**
 * Defines the default rounding factor for the rounded vertices in percent between
 * `0` and `1`. Values should be smaller than `0.5`.
 * See {@link CellStateStyle.arcSize}.
 */
export const RECTANGLE_ROUNDING_FACTOR = 0.15;
/**
 * Defines the default size in pixels of the arcs for the rounded edges.
 * See {@link CellStateStyle.arcSize}.
 */
export const LINE_ARCSIZE = 20;
/**
 * Defines the spacing between the arrow shape and its terminals. Default is 0.
 */
export const ARROW_SPACING = 0;
/**
 * Defines the width of the arrow shape. Default is 30.
 */
export const ARROW_WIDTH = 30;
/**
 * Defines the size of the arrowhead in the arrow shape. Default is 30.
 */
export const ARROW_SIZE = 30;
/**
 * Defines the rectangle for the A4 portrait page format. The dimensions
 * of this page format are 826x1169 pixels.
 */
export const PAGE_FORMAT_A4_PORTRAIT = [0, 0, 827, 1169];
/**
 * Defines the rectangle for the A4 portrait page format. The dimensions
 * of this page format are 826x1169 pixels.
 */
export const PAGE_FORMAT_A4_LANDSCAPE = [0, 0, 1169, 827];
/**
 * Defines the rectangle for the Letter portrait page format. The
 * dimensions of this page format are 850x1100 pixels.
 */
export const PAGE_FORMAT_LETTER_PORTRAIT = [0, 0, 850, 1100];
/**
 * Defines the rectangle for the Letter portrait page format. The dimensions
 * of this page format are 850x1100 pixels.
 */
export const PAGE_FORMAT_LETTER_LANDSCAPE = [0, 0, 1100, 850];
/**
 * Defines the value for none. Default is "none".
 */
export const NONE = 'none';
export var FONT;
(function (FONT) {
    /** for bold fonts. */
    FONT[FONT["BOLD"] = 1] = "BOLD";
    /** for italic fonts. */
    FONT[FONT["ITALIC"] = 2] = "ITALIC";
    /** for underlined fonts. */
    FONT[FONT["UNDERLINE"] = 4] = "UNDERLINE";
    /** for strikethrough fonts. */
    FONT[FONT["STRIKETHROUGH"] = 8] = "STRIKETHROUGH";
})(FONT || (FONT = {}));
export var ARROW;
(function (ARROW) {
    /** for classic arrow markers. */
    ARROW["CLASSIC"] = "classic";
    /** for thin classic arrow markers. */
    ARROW["CLASSIC_THIN"] = "classicThin";
    /** for block arrow markers. */
    ARROW["BLOCK"] = "block";
    /** for thin block arrow markers. */
    ARROW["BLOCK_THIN"] = "blockThin";
    /** for open arrow markers. */
    ARROW["OPEN"] = "open";
    /** for thin open arrow markers. */
    ARROW["OPEN_THIN"] = "openThin";
    /** for oval arrow markers. */
    ARROW["OVAL"] = "oval";
    /** for diamond arrow markers. */
    ARROW["DIAMOND"] = "diamond";
    /** for thin diamond arrow markers. */
    ARROW["DIAMOND_THIN"] = "diamondThin";
})(ARROW || (ARROW = {}));
export var ALIGN;
(function (ALIGN) {
    /** left horizontal alignment. */
    ALIGN["LEFT"] = "left";
    /** center horizontal alignment. */
    ALIGN["CENTER"] = "center";
    /** right horizontal alignment. */
    ALIGN["RIGHT"] = "right";
    /** top vertical alignment. */
    ALIGN["TOP"] = "top";
    /** middle vertical alignment. */
    ALIGN["MIDDLE"] = "middle";
    /** bottom vertical alignment. */
    ALIGN["BOTTOM"] = "bottom";
})(ALIGN || (ALIGN = {}));
export var DIRECTION;
(function (DIRECTION) {
    DIRECTION["NORTH"] = "north";
    DIRECTION["SOUTH"] = "south";
    DIRECTION["EAST"] = "east";
    DIRECTION["WEST"] = "west";
})(DIRECTION || (DIRECTION = {}));
export var TEXT_DIRECTION;
(function (TEXT_DIRECTION) {
    /**
     * Use this value to use the default text direction of the operating system. */
    TEXT_DIRECTION["DEFAULT"] = "";
    /** Use this value to find the direction for a given text with {@link Text#getAutoDirection}. */
    TEXT_DIRECTION["AUTO"] = "auto";
    /** Use this value for left to right text direction. */
    TEXT_DIRECTION["LTR"] = "ltr";
    /** Use this value for right to left text direction. */
    TEXT_DIRECTION["RTL"] = "rtl";
})(TEXT_DIRECTION || (TEXT_DIRECTION = {}));
/**
 * - DIRECTION_MASK_NONE: Constant for no direction.
 *
 * - DIRECTION_MASK_WEST: Bitwise mask for west direction.
 *
 * - DIRECTION_MASK_NORTH: Bitwise mask for north direction.
 *
 * - DIRECTION_MASK_SOUTH: Bitwise mask for south direction.
 *
 * - DIRECTION_MASK_EAST: Bitwise mask for east direction.
 *
 * - DIRECTION_MASK_ALL: Bitwise mask for all directions.
 */
export const DIRECTION_MASK = {
    NONE: 0,
    WEST: 1,
    NORTH: 2,
    SOUTH: 4,
    EAST: 8,
    ALL: 15,
};
/**
 * Default is horizontal.
 */
export var ELBOW;
(function (ELBOW) {
    ELBOW["VERTICAL"] = "vertical";
    ELBOW["HORIZONTAL"] = "horizontal";
})(ELBOW || (ELBOW = {}));
/**
 * Can be used as a string value for the STYLE_EDGE style.
 */
export var EDGESTYLE;
(function (EDGESTYLE) {
    EDGESTYLE["ELBOW"] = "elbowEdgeStyle";
    EDGESTYLE["ENTITY_RELATION"] = "entityRelationEdgeStyle";
    EDGESTYLE["LOOP"] = "loopEdgeStyle";
    EDGESTYLE["SIDETOSIDE"] = "sideToSideEdgeStyle";
    EDGESTYLE["TOPTOBOTTOM"] = "topToBottomEdgeStyle";
    EDGESTYLE["ORTHOGONAL"] = "orthogonalEdgeStyle";
    EDGESTYLE["SEGMENT"] = "segmentEdgeStyle";
    EDGESTYLE["MANHATTAN"] = "manhattanEdgeStyle";
})(EDGESTYLE || (EDGESTYLE = {}));
/**
 * Can be used as a string value for the STYLE_PERIMETER style.
 */
export var PERIMETER;
(function (PERIMETER) {
    PERIMETER["ELLIPSE"] = "ellipsePerimeter";
    PERIMETER["RECTANGLE"] = "rectanglePerimeter";
    PERIMETER["RHOMBUS"] = "rhombusPerimeter";
    PERIMETER["HEXAGON"] = "hexagonPerimeter";
    PERIMETER["TRIANGLE"] = "trianglePerimeter";
})(PERIMETER || (PERIMETER = {}));
export var SHAPE;
(function (SHAPE) {
    /**
     * Name under which {@link RectangleShape} is registered in {@link CellRenderer}.
     * Default is rectangle.
     */
    SHAPE["RECTANGLE"] = "rectangle";
    /**
     * Name under which {@link Ellipse} is registered in {@link CellRenderer}.
     * Default is ellipse.
     */
    SHAPE["ELLIPSE"] = "ellipse";
    /**
     * Name under which {@link DoubleEllipse} is registered in {@link CellRenderer}.
     * Default is doubleEllipse.
     */
    SHAPE["DOUBLE_ELLIPSE"] = "doubleEllipse";
    /**
     * Name under which {@link Rhombus} is registered in {@link CellRenderer}.
     * Default is rhombus.
     */
    SHAPE["RHOMBUS"] = "rhombus";
    /**
     * Name under which {@link LineShape} is registered in {@link CellRenderer} by default.
     */
    SHAPE["LINE"] = "line";
    /**
     * Name under which {@link ImageShape} is registered in {@link CellRenderer}.
     * Default is image.
     */
    SHAPE["IMAGE"] = "image";
    /**
     * Name under which {@link ArrowShape} is registered in {@link CellRenderer} by default.
     */
    SHAPE["ARROW"] = "arrow";
    /**
     * Name under which {@link ArrowConnectorShape} is registered in {@link CellRenderer} by default.
     */
    SHAPE["ARROW_CONNECTOR"] = "arrowConnector";
    /**
     * Name under which {@link Label} is registered in {@link CellRenderer}.
     * Default is label.
     */
    SHAPE["LABEL"] = "label";
    /**
     * Name under which {@link Cylinder} is registered in {@link CellRenderer}.
     * Default is cylinder.
     */
    SHAPE["CYLINDER"] = "cylinder";
    /**
     * Name under which {@link Swimlane} is registered in {@link CellRenderer}.
     * Default is swimlane.
     */
    SHAPE["SWIMLANE"] = "swimlane";
    /**
     * Name under which {@link ConnectorShape} is registered in {@link CellRenderer} by default.
     */
    SHAPE["CONNECTOR"] = "connector";
    /**
     * Name under which {@link Actor} is registered in {@link CellRenderer}.
     * Default is actor.
     */
    SHAPE["ACTOR"] = "actor";
    /**
     * Name under which {@link Cloud} is registered in {@link CellRenderer}.
     * Default is cloud.
     */
    SHAPE["CLOUD"] = "cloud";
    /**
     * Name under which {@link Triangle} is registered in {@link CellRenderer}.
     * Default is triangle.
     */
    SHAPE["TRIANGLE"] = "triangle";
    /**
     * Name under which {@link Hexagon} is registered in {@link CellRenderer}.
     * Default is hexagon.
     */
    SHAPE["HEXAGON"] = "hexagon";
})(SHAPE || (SHAPE = {}));
