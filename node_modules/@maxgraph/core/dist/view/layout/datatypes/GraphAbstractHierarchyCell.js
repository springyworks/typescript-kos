/*
Copyright 2021-present The maxGraph project Contributors
Copyright (c) 2006-2015, JGraph Ltd
Copyright (c) 2006-2015, Gaudenz Alder

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
import Cell from '../../cell/Cell';
/**
 * An abstraction of an internal hierarchy node or edge.
 *
 * @category Layout
 */
class GraphAbstractHierarchyCell extends Cell {
    constructor() {
        super();
        this.swimlaneIndex = null;
        /**
         * The maximum rank this cell occupies. Default is -1.
         */
        this.maxRank = -1;
        /**
         * The minimum rank this cell occupies. Default is -1.
         */
        this.minRank = -1;
        /**
         * The width of this cell. Default is 0.
         */
        this.width = 0;
        /**
         * The height of this cell. Default is 0.
         */
        this.height = 0;
        /**
         * A cached version of the cells this cell connects to on the next layer up
         */
        this.nextLayerConnectedCells = null;
        /**
         * A cached version of the cells this cell connects to on the next layer down
         */
        this.previousLayerConnectedCells = null;
        this.x = [];
        this.y = [];
        this.temp = [];
    }
    /**
     * Returns whether or not this cell is an edge
     */
    isEdge() {
        return false;
    }
    /**
     * Returns whether or not this cell is a node
     */
    isVertex() {
        return false;
    }
    /**
     * Set the value of x for the specified layer
     */
    setX(layer, value) {
        if (this.isVertex()) {
            this.x[0] = value;
        }
        else if (this.isEdge()) {
            this.x[layer - this.minRank - 1] = value;
        }
    }
    /**
     * Gets the value of x on the specified layer
     */
    getX(layer) {
        if (this.isVertex()) {
            return this.x[0];
        }
        if (this.isEdge()) {
            return this.x[layer - this.minRank - 1];
        }
        return 0.0;
    }
    /**
     * Set the value of y for the specified layer
     */
    setY(layer, value) {
        if (this.isVertex()) {
            this.y[0] = value;
        }
        else if (this.isEdge()) {
            this.y[layer - this.minRank - 1] = value;
        }
    }
}
export default GraphAbstractHierarchyCell;
